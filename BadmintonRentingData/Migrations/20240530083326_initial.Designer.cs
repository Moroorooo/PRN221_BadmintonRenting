// <auto-generated />
using System;
using BadmintonRentingData.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BadmintonRentingData.Migrations
{
    [DbContext(typeof(Net1702_PRN221_BadmintonRentingContext))]
    [Migration("20240530083326_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BadmintonRentingData.Model.BadmintonField", b =>
                {
                    b.Property<long>("BadmintonFieldId")
                        .HasColumnType("bigint")
                        .HasColumnName("BadmintonFieldID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .IsFixedLength();

                    b.Property<string>("BadmintonFieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsStatus")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("bit")
                        .IsFixedLength();

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("BadmintonFieldId");

                    b.ToTable("BadmintonField", (string)null);
                });

            modelBuilder.Entity("BadmintonRentingData.Model.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("BookingType")
                        .IsRequired()
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("char(55)")
                        .IsFixedLength();

                    b.Property<bool?>("CheckInStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("IsStatus")
                        .IsRequired()
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("char(55)")
                        .IsFixedLength();

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("char(55)")
                        .IsFixedLength();

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("BadmintonRentingData.Model.BookingBadmintonFieldSchedule", b =>
                {
                    b.Property<long>("OrderBadmintonFieldScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrderBadmintonFieldScheduleID");

                    b.Property<long>("BadmintonField")
                        .HasColumnType("bigint");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("OrderBadmintonFieldScheduleId")
                        .HasName("PK__Booking___750D09A512DD8A23");

                    b.HasIndex("BadmintonField");

                    b.HasIndex("BookingId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Booking_BadmintonField_Schedule", (string)null);
                });

            modelBuilder.Entity("BadmintonRentingData.Model.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<string>("IsStatus")
                        .IsRequired()
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("char(55)")
                        .IsFixedLength();

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BadmintonRentingData.Model.Schedule", b =>
                {
                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("EndTimeFrame")
                        .HasColumnType("time");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<TimeSpan>("StartTimeFrame")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TotalHours")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("BadmintonRentingData.Model.Booking", b =>
                {
                    b.HasOne("BadmintonRentingData.Model.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__UserId__398D8EEE");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BadmintonRentingData.Model.BookingBadmintonFieldSchedule", b =>
                {
                    b.HasOne("BadmintonRentingData.Model.BadmintonField", "BadmintonFieldNavigation")
                        .WithMany("BookingBadmintonFieldSchedules")
                        .HasForeignKey("BadmintonField")
                        .IsRequired()
                        .HasConstraintName("FK__Booking_B__Badmi__403A8C7D");

                    b.HasOne("BadmintonRentingData.Model.Booking", "Booking")
                        .WithMany("BookingBadmintonFieldSchedules")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking_B__Booki__403A8C7D");

                    b.HasOne("BadmintonRentingData.Model.Schedule", "Schedule")
                        .WithMany("BookingBadmintonFieldSchedules")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking_B__Sched__4222D4EF");

                    b.Navigation("BadmintonFieldNavigation");

                    b.Navigation("Booking");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("BadmintonRentingData.Model.BadmintonField", b =>
                {
                    b.Navigation("BookingBadmintonFieldSchedules");
                });

            modelBuilder.Entity("BadmintonRentingData.Model.Booking", b =>
                {
                    b.Navigation("BookingBadmintonFieldSchedules");
                });

            modelBuilder.Entity("BadmintonRentingData.Model.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BadmintonRentingData.Model.Schedule", b =>
                {
                    b.Navigation("BookingBadmintonFieldSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
